/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfaceGraphique;

import DAO.PlayerDao;
import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.border.TitledBorder;
import DAO.DaoFactory;
import DAO.MatchDao;
import DAO.PlayerDao;
import entities.Match;
import entities.Player;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author Ludovic
 */
public class MenuPrincipal extends javax.swing.JFrame {
    private int jour;
    /**
     * Creates new form MenuPrincipal
     */
    public MenuPrincipal() {
        jour = 22;
        initComponents();
        setVisible(true);
        Toolkit tk = Toolkit.getDefaultToolkit();
        Dimension d = tk.getScreenSize();
        setLocation((d.width-this.getWidth()) / 2, (d.height-this.getHeight()) / 2);
        gestionMatchs.setSize(1035, 720);
        gestionMatchs.setLocation((d.width-gestionMatchs.getWidth()) / 2, (d.height-gestionMatchs.getHeight()) / 2);
        courtChoice.add("Tous");
        courtChoice.add("Court central");
        courtChoice.add("Court annexe");
        courtChoice.add("Court d'entrainement 1");
        courtChoice.add("Court d'entrainement 2");
        courtChoice.add("Court d'entrainement 3");
        courtChoice.add("Court d'entrainement 4");
        heureChoice.add("Tous");
        heureChoice.add("8h");
        heureChoice.add("11h");
        heureChoice.add("15h");
        heureChoice.add("18h");
        heureChoice.add("21h");
        heureChoice.select("8h");

        
        gestionVIP.setSize(650, 500);
        gestionVIP.setLocation((d.width-gestionVIP.getWidth()) / 2, (d.height-gestionVIP.getHeight()) / 2);
        remplirTableVIP(tableVIP);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gestionMatchs = new javax.swing.JDialog();
        lbPlanning = new javax.swing.JLabel();
        lbNumJour = new javax.swing.JLabel();
        panPlanning = new javax.swing.JPanel();
        panMatch1 = new javax.swing.JPanel();
        match1J1 = new javax.swing.JLabel();
        match1J2 = new javax.swing.JLabel();
        match1vs = new javax.swing.JLabel();
        match1J3 = new javax.swing.JLabel();
        match1J4 = new javax.swing.JLabel();
        match1Plus = new javax.swing.JButton();
        panMatch2 = new javax.swing.JPanel();
        match2J1 = new javax.swing.JLabel();
        match2J2 = new javax.swing.JLabel();
        match2vs = new javax.swing.JLabel();
        match2J3 = new javax.swing.JLabel();
        match2J4 = new javax.swing.JLabel();
        match2Pus = new javax.swing.JButton();
        panMatch3 = new javax.swing.JPanel();
        match3J1 = new javax.swing.JLabel();
        match3J2 = new javax.swing.JLabel();
        match3vs = new javax.swing.JLabel();
        match3J3 = new javax.swing.JLabel();
        match3J4 = new javax.swing.JLabel();
        match3Plus = new javax.swing.JButton();
        panMatch4 = new javax.swing.JPanel();
        match4J1 = new javax.swing.JLabel();
        match4J2 = new javax.swing.JLabel();
        match4vs = new javax.swing.JLabel();
        match4J3 = new javax.swing.JLabel();
        match4J4 = new javax.swing.JLabel();
        match4Plus = new javax.swing.JButton();
        panMatch5 = new javax.swing.JPanel();
        match5J1 = new javax.swing.JLabel();
        match5J2 = new javax.swing.JLabel();
        match5vs = new javax.swing.JLabel();
        match5J3 = new javax.swing.JLabel();
        match5J4 = new javax.swing.JLabel();
        match5Plus = new javax.swing.JButton();
        panMatch6 = new javax.swing.JPanel();
        match6J1 = new javax.swing.JLabel();
        match6J2 = new javax.swing.JLabel();
        match6vs = new javax.swing.JLabel();
        match6J3 = new javax.swing.JLabel();
        match6J4 = new javax.swing.JLabel();
        match6Plus = new javax.swing.JButton();
        panGestion = new javax.swing.JPanel();
        btPrec = new javax.swing.JButton();
        btSuiv = new javax.swing.JButton();
        btAdd = new javax.swing.JButton();
        btModif = new javax.swing.JButton();
        btSupp = new javax.swing.JButton();
        btRetour = new javax.swing.JButton();
        panSelect = new javax.swing.JPanel();
        courtChoice = new java.awt.Choice();
        heureChoice = new java.awt.Choice();
        lbSelectCourt = new javax.swing.JLabel();
        lbSelectHeure = new javax.swing.JLabel();
        lbSelected = new javax.swing.JLabel();
        barreOutilsMatch = new javax.swing.JMenuBar();
        menuFichierMatch = new javax.swing.JMenu();
        menuQuitterMatch = new javax.swing.JMenuItem();
        gestionVIP = new javax.swing.JDialog();
        panListeVIP = new javax.swing.JPanel();
        scrollTableVIP = new javax.swing.JScrollPane();
        tableVIP = new javax.swing.JTable();
        panGestionVIP = new javax.swing.JPanel();
        btnSuppr = new javax.swing.JButton();
        btnConsult = new javax.swing.JButton();
        panAjoutVIP = new javax.swing.JPanel();
        txtFieldBirthdate = new javax.swing.JTextField();
        nom = new javax.swing.JLabel();
        prenom = new javax.swing.JLabel();
        birthdate = new javax.swing.JLabel();
        txtFieldPrenom = new javax.swing.JTextField();
        txtFieldNom = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        barreOutilsVIP = new javax.swing.JMenuBar();
        menuFichierVIP = new javax.swing.JMenu();
        menuQuitterVIP = new javax.swing.JMenuItem();
        fenAddMatch = new javax.swing.JDialog();
        lbAccueil = new javax.swing.JLabel();
        btMatchs = new javax.swing.JButton();
        btVIP = new javax.swing.JButton();
        barreOutilsPrincipal = new javax.swing.JMenuBar();
        menuFichierPrinicpal = new javax.swing.JMenu();
        menuQuitterPrincipal = new javax.swing.JMenuItem();

        gestionMatchs.setTitle("Gestion des Matchs");
        gestionMatchs.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                gestionMatchsWindowClosing(evt);
            }
        });

        lbPlanning.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbPlanning.setText("Planning des matchs : ");

        lbNumJour.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbNumJour.setText("22/01");

        panPlanning.setBorder(javax.swing.BorderFactory.createTitledBorder("Planning"));

        panMatch1.setBorder(javax.swing.BorderFactory.createTitledBorder("Court central"));

        match1J1.setText("Joueur 1");

        match1J2.setText("& Joueur 2");

        match1vs.setText("VS");

        match1J3.setText("Joueur 3");

        match1J4.setText("& Joueur 4");

        match1Plus.setText("+");

        javax.swing.GroupLayout panMatch1Layout = new javax.swing.GroupLayout(panMatch1);
        panMatch1.setLayout(panMatch1Layout);
        panMatch1Layout.setHorizontalGroup(
            panMatch1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panMatch1Layout.createSequentialGroup()
                .addGroup(panMatch1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panMatch1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panMatch1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(match1J1)
                            .addComponent(match1J2)))
                    .addGroup(panMatch1Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(match1vs))
                    .addGroup(panMatch1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(match1J3))
                    .addGroup(panMatch1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(match1J4))
                    .addGroup(panMatch1Layout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addComponent(match1Plus)))
                .addContainerGap(133, Short.MAX_VALUE))
        );
        panMatch1Layout.setVerticalGroup(
            panMatch1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panMatch1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(match1J1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(match1J2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(match1vs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(match1J3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(match1J4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(match1Plus)
                .addContainerGap())
        );

        panMatch2.setBorder(javax.swing.BorderFactory.createTitledBorder("Court annexe"));

        match2J1.setText("Joueur 1");

        match2J2.setText("& Joueur 2");

        match2vs.setText("VS");

        match2J3.setText("Joueur 3");

        match2J4.setText("& Joueur 4");

        match2Pus.setText("+");

        javax.swing.GroupLayout panMatch2Layout = new javax.swing.GroupLayout(panMatch2);
        panMatch2.setLayout(panMatch2Layout);
        panMatch2Layout.setHorizontalGroup(
            panMatch2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panMatch2Layout.createSequentialGroup()
                .addGroup(panMatch2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panMatch2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panMatch2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(match2J1)
                            .addComponent(match2J2)))
                    .addGroup(panMatch2Layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(match2vs))
                    .addGroup(panMatch2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(match2J3))
                    .addGroup(panMatch2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(match2J4)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panMatch2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(match2Pus)
                .addGap(133, 133, 133))
        );
        panMatch2Layout.setVerticalGroup(
            panMatch2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panMatch2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(match2J1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(match2J2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(match2vs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(match2J3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(match2J4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(match2Pus)
                .addContainerGap())
        );

        panMatch3.setBorder(javax.swing.BorderFactory.createTitledBorder("Court d'entrainement 1"));
        panMatch3.setPreferredSize(new java.awt.Dimension(347, 168));

        match3J1.setText("Joueur 1");

        match3J2.setText("& Joueur 2");

        match3vs.setText("VS");

        match3J3.setText("Joueur 3");

        match3J4.setText("& Joueur 4");

        match3Plus.setText("+");

        javax.swing.GroupLayout panMatch3Layout = new javax.swing.GroupLayout(panMatch3);
        panMatch3.setLayout(panMatch3Layout);
        panMatch3Layout.setHorizontalGroup(
            panMatch3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panMatch3Layout.createSequentialGroup()
                .addGroup(panMatch3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panMatch3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panMatch3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(match3J1)
                            .addComponent(match3J2)))
                    .addGroup(panMatch3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(match3J3))
                    .addGroup(panMatch3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(match3J4))
                    .addGroup(panMatch3Layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(match3vs)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panMatch3Layout.createSequentialGroup()
                .addGap(0, 132, Short.MAX_VALUE)
                .addComponent(match3Plus)
                .addGap(133, 133, 133))
        );
        panMatch3Layout.setVerticalGroup(
            panMatch3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panMatch3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(match3J1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(match3J2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(match3vs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(match3J3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(match3J4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(match3Plus)
                .addContainerGap())
        );

        panMatch4.setBorder(javax.swing.BorderFactory.createTitledBorder("Court d'entrainement 2"));

        match4J1.setText("Joueur 1");

        match4J2.setText("& Joueur 2");

        match4vs.setText("VS");

        match4J3.setText("Joueur 3");

        match4J4.setText("& Joueur 4");

        match4Plus.setText("+");

        javax.swing.GroupLayout panMatch4Layout = new javax.swing.GroupLayout(panMatch4);
        panMatch4.setLayout(panMatch4Layout);
        panMatch4Layout.setHorizontalGroup(
            panMatch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panMatch4Layout.createSequentialGroup()
                .addGroup(panMatch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panMatch4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panMatch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(match4J1)
                            .addComponent(match4J2)))
                    .addGroup(panMatch4Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(match4vs))
                    .addGroup(panMatch4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(match4J3))
                    .addGroup(panMatch4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(match4J4))
                    .addGroup(panMatch4Layout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addComponent(match4Plus)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panMatch4Layout.setVerticalGroup(
            panMatch4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panMatch4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(match4J1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(match4J2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(match4vs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(match4J3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(match4J4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(match4Plus)
                .addContainerGap())
        );

        panMatch5.setBorder(javax.swing.BorderFactory.createTitledBorder("Court d'entrainement 3"));

        match5J1.setText("Joueur 1");

        match5J2.setText("& Joueur 2");

        match5vs.setText("VS");

        match5J3.setText("Joueur 3");

        match5J4.setText("& Joueur 4");

        match5Plus.setText("+");

        javax.swing.GroupLayout panMatch5Layout = new javax.swing.GroupLayout(panMatch5);
        panMatch5.setLayout(panMatch5Layout);
        panMatch5Layout.setHorizontalGroup(
            panMatch5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panMatch5Layout.createSequentialGroup()
                .addGroup(panMatch5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panMatch5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panMatch5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(match5J1)
                            .addComponent(match5J2)))
                    .addGroup(panMatch5Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(match5vs))
                    .addGroup(panMatch5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(match5J3))
                    .addGroup(panMatch5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(match5J4))
                    .addGroup(panMatch5Layout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addComponent(match5Plus)))
                .addContainerGap(133, Short.MAX_VALUE))
        );
        panMatch5Layout.setVerticalGroup(
            panMatch5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panMatch5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(match5J1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(match5J2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(match5vs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(match5J3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(match5J4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(match5Plus)
                .addContainerGap())
        );

        panMatch6.setBorder(javax.swing.BorderFactory.createTitledBorder("Court d'entrainement 6"));

        match6J1.setText("Joueur 1");

        match6J2.setText("& Joueur 2");

        match6vs.setText("VS");

        match6J3.setText("Joueur 3");

        match6J4.setText("& Joueur 4");

        match6Plus.setText("+");

        javax.swing.GroupLayout panMatch6Layout = new javax.swing.GroupLayout(panMatch6);
        panMatch6.setLayout(panMatch6Layout);
        panMatch6Layout.setHorizontalGroup(
            panMatch6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panMatch6Layout.createSequentialGroup()
                .addGroup(panMatch6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panMatch6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panMatch6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(match6J1)
                            .addComponent(match6J2)))
                    .addGroup(panMatch6Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(match6vs))
                    .addGroup(panMatch6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(match6J3))
                    .addGroup(panMatch6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(match6J4)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panMatch6Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(match6Plus)
                .addGap(133, 133, 133))
        );
        panMatch6Layout.setVerticalGroup(
            panMatch6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panMatch6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(match6J1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(match6J2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(match6vs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(match6J3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(match6J4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(match6Plus)
                .addContainerGap())
        );

        javax.swing.GroupLayout panPlanningLayout = new javax.swing.GroupLayout(panPlanning);
        panPlanning.setLayout(panPlanningLayout);
        panPlanningLayout.setHorizontalGroup(
            panPlanningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panPlanningLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panPlanningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panMatch1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panMatch4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panPlanningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panMatch2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panMatch5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panPlanningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(panMatch6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panMatch3, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE))
                .addContainerGap())
        );
        panPlanningLayout.setVerticalGroup(
            panPlanningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panPlanningLayout.createSequentialGroup()
                .addGroup(panPlanningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(panMatch3, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                    .addComponent(panMatch1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panMatch2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panPlanningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panMatch4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panMatch5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panMatch6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        panGestion.setBorder(javax.swing.BorderFactory.createTitledBorder("Gestion"));

        btPrec.setText("<< Jour précédent");
        btPrec.setEnabled(false);
        btPrec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPrecActionPerformed(evt);
            }
        });

        btSuiv.setText("Jour suivant >>");
        btSuiv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSuivActionPerformed(evt);
            }
        });

        btAdd.setText("Ajouter un match");

        btModif.setText("Modifier un match");

        btSupp.setText("Supprimer un match");

        btRetour.setText("Retour");
        btRetour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRetourActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panGestionLayout = new javax.swing.GroupLayout(panGestion);
        panGestion.setLayout(panGestionLayout);
        panGestionLayout.setHorizontalGroup(
            panGestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panGestionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btPrec)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 126, Short.MAX_VALUE)
                .addComponent(btAdd)
                .addGap(18, 18, 18)
                .addComponent(btModif)
                .addGap(18, 18, 18)
                .addComponent(btSupp)
                .addGap(18, 18, 18)
                .addComponent(btRetour)
                .addGap(126, 126, 126)
                .addComponent(btSuiv)
                .addContainerGap())
        );
        panGestionLayout.setVerticalGroup(
            panGestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panGestionLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panGestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btPrec)
                    .addComponent(btAdd)
                    .addComponent(btModif)
                    .addComponent(btSupp)
                    .addComponent(btRetour)
                    .addComponent(btSuiv))
                .addContainerGap())
        );

        panSelect.setBorder(javax.swing.BorderFactory.createTitledBorder("Sélection"));

        courtChoice.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                courtChoiceItemStateChanged(evt);
            }
        });

        heureChoice.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                heureChoiceItemStateChanged(evt);
            }
        });

        lbSelectCourt.setText("Sélection du court");

        lbSelectHeure.setText("Sélection de l'horaire");

        javax.swing.GroupLayout panSelectLayout = new javax.swing.GroupLayout(panSelect);
        panSelect.setLayout(panSelectLayout);
        panSelectLayout.setHorizontalGroup(
            panSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panSelectLayout.createSequentialGroup()
                .addGap(132, 132, 132)
                .addComponent(lbSelectCourt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(courtChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(132, 132, 132)
                .addComponent(lbSelectHeure)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(heureChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panSelectLayout.setVerticalGroup(
            panSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panSelectLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbSelectCourt)
                    .addComponent(courtChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(heureChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbSelectHeure))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lbSelected.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbSelected.setText("8h");

        menuFichierMatch.setText("Fichier");

        menuQuitterMatch.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        menuQuitterMatch.setText("Quitter");
        menuQuitterMatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuQuitterMatchActionPerformed(evt);
            }
        });
        menuFichierMatch.add(menuQuitterMatch);

        barreOutilsMatch.add(menuFichierMatch);

        gestionMatchs.setJMenuBar(barreOutilsMatch);

        javax.swing.GroupLayout gestionMatchsLayout = new javax.swing.GroupLayout(gestionMatchs.getContentPane());
        gestionMatchs.getContentPane().setLayout(gestionMatchsLayout);
        gestionMatchsLayout.setHorizontalGroup(
            gestionMatchsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gestionMatchsLayout.createSequentialGroup()
                .addGroup(gestionMatchsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gestionMatchsLayout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(lbPlanning)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbNumJour)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbSelected)
                        .addGap(82, 82, 82))
                    .addGroup(gestionMatchsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panGestion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(gestionMatchsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panPlanning, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(gestionMatchsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panSelect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        gestionMatchsLayout.setVerticalGroup(
            gestionMatchsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gestionMatchsLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(gestionMatchsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbPlanning)
                    .addComponent(lbNumJour)
                    .addComponent(lbSelected))
                .addGap(18, 18, 18)
                .addComponent(panPlanning, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panGestion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        gestionVIP.setTitle("Gestion des VIP");
        gestionVIP.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                gestionVIPWindowClosing(evt);
            }
        });

        panListeVIP.setBorder(javax.swing.BorderFactory.createTitledBorder("Liste VIP"));

        tableVIP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "NOM", "PRENOM", "DATE DE NAISSANCE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollTableVIP.setViewportView(tableVIP);

        javax.swing.GroupLayout panListeVIPLayout = new javax.swing.GroupLayout(panListeVIP);
        panListeVIP.setLayout(panListeVIPLayout);
        panListeVIPLayout.setHorizontalGroup(
            panListeVIPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panListeVIPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollTableVIP, javax.swing.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE)
                .addContainerGap())
        );
        panListeVIPLayout.setVerticalGroup(
            panListeVIPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panListeVIPLayout.createSequentialGroup()
                .addComponent(scrollTableVIP, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panGestionVIP.setBorder(javax.swing.BorderFactory.createTitledBorder("Gestion VIP"));

        btnSuppr.setText("Supprimer");
        btnSuppr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSupprActionPerformed(evt);
            }
        });

        btnConsult.setText("Consulter relations & actions VIP");
        btnConsult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultActionPerformed(evt);
            }
        });

        panAjoutVIP.setBorder(javax.swing.BorderFactory.createTitledBorder("Ajout d'un VIP"));

        nom.setText("Nom :");

        prenom.setText("Prénom :");

        birthdate.setText("Date de naissance (jj/mm/aaa) :");

        txtFieldNom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFieldNomActionPerformed(evt);
            }
        });

        jButton1.setText("Ajouter");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panAjoutVIPLayout = new javax.swing.GroupLayout(panAjoutVIP);
        panAjoutVIP.setLayout(panAjoutVIPLayout);
        panAjoutVIPLayout.setHorizontalGroup(
            panAjoutVIPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panAjoutVIPLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(panAjoutVIPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(birthdate)
                    .addComponent(prenom)
                    .addComponent(nom))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panAjoutVIPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtFieldPrenom)
                    .addComponent(txtFieldBirthdate)
                    .addComponent(txtFieldNom, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panAjoutVIPLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );
        panAjoutVIPLayout.setVerticalGroup(
            panAjoutVIPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panAjoutVIPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panAjoutVIPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nom)
                    .addComponent(txtFieldNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panAjoutVIPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prenom)
                    .addComponent(txtFieldPrenom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panAjoutVIPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(birthdate)
                    .addComponent(txtFieldBirthdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        javax.swing.GroupLayout panGestionVIPLayout = new javax.swing.GroupLayout(panGestionVIP);
        panGestionVIP.setLayout(panGestionVIPLayout);
        panGestionVIPLayout.setHorizontalGroup(
            panGestionVIPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panGestionVIPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panGestionVIPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panAjoutVIP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panGestionVIPLayout.createSequentialGroup()
                        .addComponent(btnConsult)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSuppr)))
                .addContainerGap())
        );
        panGestionVIPLayout.setVerticalGroup(
            panGestionVIPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panGestionVIPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panGestionVIPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConsult)
                    .addComponent(btnSuppr))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panAjoutVIP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        menuFichierVIP.setText("Fichier");

        menuQuitterVIP.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        menuQuitterVIP.setText("Quitter");
        menuQuitterVIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuQuitterVIPActionPerformed(evt);
            }
        });
        menuFichierVIP.add(menuQuitterVIP);

        barreOutilsVIP.add(menuFichierVIP);

        gestionVIP.setJMenuBar(barreOutilsVIP);

        javax.swing.GroupLayout gestionVIPLayout = new javax.swing.GroupLayout(gestionVIP.getContentPane());
        gestionVIP.getContentPane().setLayout(gestionVIPLayout);
        gestionVIPLayout.setHorizontalGroup(
            gestionVIPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gestionVIPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gestionVIPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panListeVIP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panGestionVIP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        gestionVIPLayout.setVerticalGroup(
            gestionVIPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gestionVIPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panListeVIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panGestionVIP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout fenAddMatchLayout = new javax.swing.GroupLayout(fenAddMatch.getContentPane());
        fenAddMatch.getContentPane().setLayout(fenAddMatchLayout);
        fenAddMatchLayout.setHorizontalGroup(
            fenAddMatchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        fenAddMatchLayout.setVerticalGroup(
            fenAddMatchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Gestion du Grand Prix de Tennis de Lyon");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lbAccueil.setFont(new java.awt.Font("Tahoma", 2, 36)); // NOI18N
        lbAccueil.setText("Accueil");

        btMatchs.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btMatchs.setText("Gestion des matchs");
        btMatchs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMatchsActionPerformed(evt);
            }
        });

        btVIP.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btVIP.setText("Gestion des VIP");
        btVIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVIPActionPerformed(evt);
            }
        });

        menuFichierPrinicpal.setText("Fichier");

        menuQuitterPrincipal.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        menuQuitterPrincipal.setText("Quitter");
        menuFichierPrinicpal.add(menuQuitterPrincipal);

        barreOutilsPrincipal.add(menuFichierPrinicpal);

        setJMenuBar(barreOutilsPrincipal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbAccueil, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(btVIP))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(btMatchs)))
                .addContainerGap(118, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbAccueil)
                .addGap(62, 62, 62)
                .addComponent(btMatchs)
                .addGap(31, 31, 31)
                .addComponent(btVIP)
                .addContainerGap(69, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        quitter();
    }//GEN-LAST:event_formWindowClosing

    private void btMatchsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMatchsActionPerformed
        dispose();
        gestionMatchs.setVisible(true);
    }//GEN-LAST:event_btMatchsActionPerformed

    private void btVIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVIPActionPerformed
        dispose();
        gestionVIP.setVisible(true);
    }//GEN-LAST:event_btVIPActionPerformed

    private void menuQuitterMatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuQuitterMatchActionPerformed
        gestionMatchs.setVisible(false);
        setVisible(true);
    }//GEN-LAST:event_menuQuitterMatchActionPerformed

    private void gestionMatchsWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_gestionMatchsWindowClosing
        gestionMatchs.setVisible(false);
        setVisible(true);
    }//GEN-LAST:event_gestionMatchsWindowClosing

    private void menuQuitterVIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuQuitterVIPActionPerformed
        gestionVIP.setVisible(false);
        setVisible(true);
    }//GEN-LAST:event_menuQuitterVIPActionPerformed

    private void gestionVIPWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_gestionVIPWindowClosing
        gestionVIP.setVisible(false);
        setVisible(true);
    }//GEN-LAST:event_gestionVIPWindowClosing

    private void btPrecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPrecActionPerformed
        if (jour != 22) {
            try {
                jour--;
                afficherMatchs();
            } catch (IOException | SQLException ex) {
                Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btPrecActionPerformed

    private void btSuivActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSuivActionPerformed
        if (jour != 30) {
            try {
                jour++;
                afficherMatchs();
            } catch (IOException | SQLException ex) {
                Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btSuivActionPerformed

    private void courtChoiceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_courtChoiceItemStateChanged
        if (courtChoice.getSelectedItem().equals("Tous") && heureChoice.getSelectedItem().equals("Tous")) {
            JOptionPane.showMessageDialog(this, "Impossible d'afficher tous les terrains pour toutes "
                    + "les horaires.", "Erreur", JOptionPane.OK_OPTION);
            courtChoice.select("Court central");
        }
        else
            try {
            afficherMatchs();
        } catch (IOException | SQLException ex) {
            Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_courtChoiceItemStateChanged

    private void heureChoiceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_heureChoiceItemStateChanged
        if (courtChoice.getSelectedItem().equals("Tous") && heureChoice.getSelectedItem().equals("Tous")) {
            JOptionPane.showMessageDialog(this, "Impossible d'afficher tous les terrains pour toutes "
                    + "les horaires.", "Erreur", JOptionPane.OK_OPTION);
            heureChoice.select("8h");
        }
        else
            try {
            afficherMatchs();
        } catch (IOException | SQLException ex) {
            Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_heureChoiceItemStateChanged

    private void btRetourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRetourActionPerformed
        gestionMatchs.setVisible(false);
        setVisible(true);
    }//GEN-LAST:event_btRetourActionPerformed

    private void btnSupprActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSupprActionPerformed
        supprimerVIP(tableVIP);
    }//GEN-LAST:event_btnSupprActionPerformed

    private void btnConsultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnConsultActionPerformed

    private void txtFieldNomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFieldNomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFieldNomActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ajouterVIP(tableVIP);
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar barreOutilsMatch;
    private javax.swing.JMenuBar barreOutilsPrincipal;
    private javax.swing.JMenuBar barreOutilsVIP;
    private javax.swing.JLabel birthdate;
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btMatchs;
    private javax.swing.JButton btModif;
    private javax.swing.JButton btPrec;
    private javax.swing.JButton btRetour;
    private javax.swing.JButton btSuiv;
    private javax.swing.JButton btSupp;
    private javax.swing.JButton btVIP;
    private javax.swing.JButton btnConsult;
    private javax.swing.JButton btnSuppr;
    private java.awt.Choice courtChoice;
    private javax.swing.JDialog fenAddMatch;
    private javax.swing.JDialog gestionMatchs;
    private javax.swing.JDialog gestionVIP;
    private java.awt.Choice heureChoice;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel lbAccueil;
    private javax.swing.JLabel lbNumJour;
    private javax.swing.JLabel lbPlanning;
    private javax.swing.JLabel lbSelectCourt;
    private javax.swing.JLabel lbSelectHeure;
    private javax.swing.JLabel lbSelected;
    private javax.swing.JLabel match1J1;
    private javax.swing.JLabel match1J2;
    private javax.swing.JLabel match1J3;
    private javax.swing.JLabel match1J4;
    private javax.swing.JButton match1Plus;
    private javax.swing.JLabel match1vs;
    private javax.swing.JLabel match2J1;
    private javax.swing.JLabel match2J2;
    private javax.swing.JLabel match2J3;
    private javax.swing.JLabel match2J4;
    private javax.swing.JButton match2Pus;
    private javax.swing.JLabel match2vs;
    private javax.swing.JLabel match3J1;
    private javax.swing.JLabel match3J2;
    private javax.swing.JLabel match3J3;
    private javax.swing.JLabel match3J4;
    private javax.swing.JButton match3Plus;
    private javax.swing.JLabel match3vs;
    private javax.swing.JLabel match4J1;
    private javax.swing.JLabel match4J2;
    private javax.swing.JLabel match4J3;
    private javax.swing.JLabel match4J4;
    private javax.swing.JButton match4Plus;
    private javax.swing.JLabel match4vs;
    private javax.swing.JLabel match5J1;
    private javax.swing.JLabel match5J2;
    private javax.swing.JLabel match5J3;
    private javax.swing.JLabel match5J4;
    private javax.swing.JButton match5Plus;
    private javax.swing.JLabel match5vs;
    private javax.swing.JLabel match6J1;
    private javax.swing.JLabel match6J2;
    private javax.swing.JLabel match6J3;
    private javax.swing.JLabel match6J4;
    private javax.swing.JButton match6Plus;
    private javax.swing.JLabel match6vs;
    private javax.swing.JMenu menuFichierMatch;
    private javax.swing.JMenu menuFichierPrinicpal;
    private javax.swing.JMenu menuFichierVIP;
    private javax.swing.JMenuItem menuQuitterMatch;
    private javax.swing.JMenuItem menuQuitterPrincipal;
    private javax.swing.JMenuItem menuQuitterVIP;
    private javax.swing.JLabel nom;
    private javax.swing.JPanel panAjoutVIP;
    private javax.swing.JPanel panGestion;
    private javax.swing.JPanel panGestionVIP;
    private javax.swing.JPanel panListeVIP;
    private javax.swing.JPanel panMatch1;
    private javax.swing.JPanel panMatch2;
    private javax.swing.JPanel panMatch3;
    private javax.swing.JPanel panMatch4;
    private javax.swing.JPanel panMatch5;
    private javax.swing.JPanel panMatch6;
    private javax.swing.JPanel panPlanning;
    private javax.swing.JPanel panSelect;
    private javax.swing.JLabel prenom;
    private javax.swing.JScrollPane scrollTableVIP;
    private javax.swing.JTable tableVIP;
    private javax.swing.JTextField txtFieldBirthdate;
    private javax.swing.JTextField txtFieldNom;
    private javax.swing.JTextField txtFieldPrenom;
    // End of variables declaration//GEN-END:variables

    private void quitter() {
        int rep = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment quitter ?", 
                "Attention", JOptionPane.YES_NO_OPTION);
        if (rep == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }
    
    private void afficherMatchs() throws IOException, SQLException {
        lbNumJour.setText(Integer.toString(jour)+"/01");
        if (jour == 22) btPrec.setEnabled(false);
        else if (jour == 30) btSuiv.setEnabled(false);
        else {
            btPrec.setEnabled(true);
            btSuiv.setEnabled(true);
        }
        
        if (courtChoice.getSelectedItem().equals("Tous")) {
            //Mise à jour des bordures des panels
            panMatch2.setVisible(true);
            panMatch3.setVisible(true);
            panMatch4.setVisible(true);
            panMatch5.setVisible(true);
            panMatch6.setVisible(true);
            panMatch1.setBorder(new TitledBorder("Court central"));
            panMatch2.setBorder(new TitledBorder("Court annexe"));
            panMatch3.setBorder(new TitledBorder("Court d'entrainement 1"));
            panMatch4.setBorder(new TitledBorder("Court d'entrainement 2"));
            panMatch5.setBorder(new TitledBorder("Court d'entrainement 3"));
            //Mise à jour du label indiquant la sélection
            lbSelected.setText(heureChoice.getSelectedItem());
            MatchDao mdao = DaoFactory.getMatchDao();
            remplirPlanningHeures(mdao.selectMatchByDateByHour(Integer.toString(jour)+"/01/2013", 
                    Integer.parseInt(heureChoice.getSelectedItem())));
        }
        else if (heureChoice.getSelectedItem().equals("Tous")) {
            //Mise à jour des bordures des panels
            panMatch2.setVisible(true);
            panMatch3.setVisible(true);
            panMatch4.setVisible(true);
            panMatch5.setVisible(true);
            panMatch6.setVisible(false);
            panMatch1.setBorder(new TitledBorder("8h"));
            panMatch2.setBorder(new TitledBorder("11h"));
            panMatch3.setBorder(new TitledBorder("15h"));
            panMatch4.setBorder(new TitledBorder("18h"));
            panMatch5.setBorder(new TitledBorder("21h"));
            //Mise à jour du label indiquant la sélection
            lbSelected.setText(courtChoice.getSelectedItem());
            MatchDao mdao = DaoFactory.getMatchDao();
            remplirPlanningCourts(mdao.selectMatchByTerrainByDate(Integer.toString(jour)+"/01/2013", 
                    affecteNumCourt(courtChoice.getSelectedItem())));
        }
        else {
            //Mise à jour des bordures des panels
            panMatch2.setVisible(false);
            panMatch3.setVisible(false);
            panMatch4.setVisible(false);
            panMatch5.setVisible(false);
            panMatch6.setVisible(false);
            panMatch1.setBorder(new TitledBorder(courtChoice.getSelectedItem() + " - " + 
                    heureChoice.getSelectedItem()));
            //Mise à jour du label indiquant la sélection
            lbSelected.setText(courtChoice.getSelectedItem() + " - " + heureChoice.getSelectedItem());
            MatchDao mdao = DaoFactory.getMatchDao();
            remplirPlanningCourtHeure(mdao.selectMatchByDateByHour(Integer.toString(jour)+"/01/2013", 
                    Integer.parseInt(heureChoice.getSelectedItem())));
        }
    }
    
    private int affecteNumCourt(String terrain) {
        if (terrain.equals("Court central")) return 1;
        else if (terrain.equals("Court annexe")) return 2;
        else if (terrain.equals("Court d'entrainement 1")) return 3;
        else if (terrain.equals("Court d'entrainement 2")) return 4;
        else if (terrain.equals("Court d'entrainement 3")) return 5;
        else return 6;
    }
    
    private void remplirPlanningCourtHeure(ResultSet rs) throws SQLException, IOException {
        List<Match> matchs = new ArrayList<>();
        
        while (rs.next()) {
            Match m = new Match(rs.getInt("ID"), rs.getInt("IDP1"), rs.getInt("IDP2"), rs.getInt("IDP3"), 
                    rs.getInt("IDP4"), rs.getInt("JOUR"), rs.getInt("HEURE"), rs.getInt("TERRAIN"), 
                    rs.getInt("IDARBCHAISE"), rs.getInt("IDARBFILET"), rs.getInt("IDRAMASS1"), 
                    rs.getInt("IDRAMASS2"), rs.getInt("SIMPLE"));
            matchs.add(m);
        }
        
        if (matchs.size() == 1) {
            PlayerDao pdao = DaoFactory.getPlayerDao();
            Player p = pdao.selectPlayer(matchs.get(5).getIdP1());
            match6J1.setText(p.getSurname() + " " + p.getName());
            p = pdao.selectPlayer(matchs.get(5).getIdP3());
            match6J3.setText(p.getSurname() + " " + p.getName());
            match6vs.setText("VS");
            if (matchs.get(5).isSimple() == 0) {
                p = pdao.selectPlayer(matchs.get(5).getIdP2());
                match6J2.setText(p.getSurname() + " " + p.getName());
                p = pdao.selectPlayer(matchs.get(5).getIdP4());
                match6J4.setText(p.getSurname() + " " + p.getName());
            }
        }
        else {
            match6vs.setText("Aucun match sur ce cours à cette heure.");
            match6J1.setText("");
            match6J2.setText("");
            match6J3.setText("");
            match6J4.setText("");
        }
    }
    
    private void remplirPlanningCourts(ResultSet rs) throws SQLException, IOException {
        List<Match> matchs = new ArrayList<>();
        
        while (rs.next()) {
            Match m = new Match(rs.getInt("ID"), rs.getInt("IDP1"), rs.getInt("IDP2"), rs.getInt("IDP3"), 
                    rs.getInt("IDP4"), rs.getInt("JOUR"), rs.getInt("HEURE"), rs.getInt("TERRAIN"), 
                    rs.getInt("IDARBCHAISE"), rs.getInt("IDARBFILET"), rs.getInt("IDRAMASS1"), 
                    rs.getInt("IDRAMASS2"), rs.getInt("SIMPLE"));
            matchs.add(m);
        }
        
        for (int i = 1 ; i <= 6 ; i++) {
            switch (i) {
                case 1:
                    for (Match m : matchs) {
                        if (m.getIdTerrain() == 1) {
                            PlayerDao pdao = DaoFactory.getPlayerDao();
                            Player p = pdao.selectPlayer(m.getIdP1());
                            match1J1.setText(p.getSurname() + " " + p.getName());
                            p = pdao.selectPlayer(m.getIdP3());
                            match1J3.setText(p.getSurname() + " " + p.getName());
                            match1vs.setText("VS");
                            if (m.isSimple() == 0) {
                                p = pdao.selectPlayer(m.getIdP2());
                                match1J2.setText(p.getSurname() + " " + p.getName());
                                p = pdao.selectPlayer(m.getIdP4());
                                match1J4.setText(p.getSurname() + " " + p.getName());
                            }
                        }
                        else {
                            match1vs.setText("Aucun match sur ce cours à cette heure.");
                            match1J1.setText("");
                            match1J2.setText("");
                            match1J3.setText("");
                            match1J4.setText("");
                        }
                    }
                    break;
                case 2:
                    for (Match m : matchs) {
                        if (m.getIdTerrain() == 2) {
                            PlayerDao pdao = DaoFactory.getPlayerDao();
                            Player p = pdao.selectPlayer(m.getIdP1());
                            match2J1.setText(p.getSurname() + " " + p.getName());
                            p = pdao.selectPlayer(m.getIdP3());
                            match2J3.setText(p.getSurname() + " " + p.getName());
                            match2vs.setText("VS");
                            if (m.isSimple() == 0) {
                                p = pdao.selectPlayer(m.getIdP2());
                                match2J2.setText(p.getSurname() + " " + p.getName());
                                p = pdao.selectPlayer(m.getIdP4());
                                match2J4.setText(p.getSurname() + " " + p.getName());
                            }
                        }
                        else {
                            match2vs.setText("Aucun match sur ce cours à cette heure.");
                            match2J1.setText("");
                            match2J2.setText("");
                            match2J3.setText("");
                            match2J4.setText("");
                        }
                    }
                    break;
                case 3:
                    for (Match m : matchs) {
                        if (m.getIdTerrain() == 3) {
                            PlayerDao pdao = DaoFactory.getPlayerDao();
                            Player p = pdao.selectPlayer(m.getIdP1());
                            match3J1.setText(p.getSurname() + " " + p.getName());
                            p = pdao.selectPlayer(m.getIdP3());
                            match3J3.setText(p.getSurname() + " " + p.getName());
                            match3vs.setText("VS");
                            if (m.isSimple() == 0) {
                                p = pdao.selectPlayer(m.getIdP2());
                                match3J2.setText(p.getSurname() + " " + p.getName());
                                p = pdao.selectPlayer(m.getIdP4());
                                match3J4.setText(p.getSurname() + " " + p.getName());
                            }
                        }
                        else {
                            match3vs.setText("Aucun match sur ce cours à cette heure.");
                            match3J1.setText("");
                            match3J2.setText("");
                            match3J3.setText("");
                            match3J4.setText("");
                        }
                    }
                    break;
                case 4:
                    for (Match m : matchs) {
                        if (m.getIdTerrain() == 4) {
                            PlayerDao pdao = DaoFactory.getPlayerDao();
                            Player p = pdao.selectPlayer(m.getIdP1());
                            match4J1.setText(p.getSurname() + " " + p.getName());
                            p = pdao.selectPlayer(m.getIdP3());
                            match4J3.setText(p.getSurname() + " " + p.getName());
                            match4vs.setText("VS");
                            if (m.isSimple() == 0) {
                                p = pdao.selectPlayer(m.getIdP2());
                                match4J2.setText(p.getSurname() + " " + p.getName());
                                p = pdao.selectPlayer(m.getIdP4());
                                match4J4.setText(p.getSurname() + " " + p.getName());
                            }
                        }
                        else {
                            match4vs.setText("Aucun match sur ce cours à cette heure.");
                            match4J1.setText("");
                            match4J2.setText("");
                            match4J3.setText("");
                            match4J4.setText("");
                        }
                    }
                    break;
                case 5:
                    for (Match m : matchs) {
                        if (m.getIdTerrain() == 5) {
                            PlayerDao pdao = DaoFactory.getPlayerDao();
                            Player p = pdao.selectPlayer(m.getIdP1());
                            match5J1.setText(p.getSurname() + " " + p.getName());
                            p = pdao.selectPlayer(m.getIdP3());
                            match5J3.setText(p.getSurname() + " " + p.getName());
                            match5vs.setText("VS");
                            if (m.isSimple() == 0) {
                                p = pdao.selectPlayer(m.getIdP2());
                                match5J2.setText(p.getSurname() + " " + p.getName());
                                p = pdao.selectPlayer(m.getIdP4());
                                match5J4.setText(p.getSurname() + " " + p.getName());
                            }
                        }
                        else {
                            match5vs.setText("Aucun match sur ce cours à cette heure.");
                            match5J1.setText("");
                            match5J2.setText("");
                            match5J3.setText("");
                            match5J4.setText("");
                        }
                    }
                    break;
                case 6:
                    for (Match m : matchs) {
                        if (m.getIdTerrain() == 6) {
                            PlayerDao pdao = DaoFactory.getPlayerDao();
                            Player p = pdao.selectPlayer(m.getIdP1());
                            match6J1.setText(p.getSurname() + " " + p.getName());
                            p = pdao.selectPlayer(m.getIdP3());
                            match6J3.setText(p.getSurname() + " " + p.getName());
                            match6vs.setText("VS");
                            if (m.isSimple() == 0) {
                                p = pdao.selectPlayer(m.getIdP2());
                                match6J2.setText(p.getSurname() + " " + p.getName());
                                p = pdao.selectPlayer(m.getIdP4());
                                match6J4.setText(p.getSurname() + " " + p.getName());
                            }
                        }
                        else {
                            match6vs.setText("Aucun match sur ce cours à cette heure.");
                            match6J1.setText("");
                            match6J2.setText("");
                            match6J3.setText("");
                            match6J4.setText("");
                        }
                    }
                    break;
            }
        }
    }
    
    private void remplirPlanningHeures(ResultSet rs) throws SQLException, IOException {
        List<Match> matchs = new ArrayList<>();
        
        while (rs.next()) {
            Match m = new Match(rs.getInt("ID"), rs.getInt("IDP1"), rs.getInt("IDP2"), rs.getInt("IDP3"), 
                    rs.getInt("IDP4"), rs.getInt("JOUR"), rs.getInt("HEURE"), rs.getInt("TERRAIN"), 
                    rs.getInt("IDARBCHAISE"), rs.getInt("IDARBFILET"), rs.getInt("IDRAMASS1"), 
                    rs.getInt("IDRAMASS2"), rs.getInt("SIMPLE"));
            matchs.add(m);
        }
        
        for (int i = 1 ; i <= 6 ; i++) {
            switch (i) {
                case 1:
                    for (Match m : matchs) {
                        if (m.getHeure() == 8) {
                            PlayerDao pdao = DaoFactory.getPlayerDao();
                            Player p = pdao.selectPlayer(m.getIdP1());
                            match1J1.setText(p.getSurname() + " " + p.getName());
                            p = pdao.selectPlayer(m.getIdP3());
                            match1J3.setText(p.getSurname() + " " + p.getName());
                            match1vs.setText("VS");
                            if (m.isSimple() == 0) {
                                p = pdao.selectPlayer(m.getIdP2());
                                match1J2.setText(p.getSurname() + " " + p.getName());
                                p = pdao.selectPlayer(m.getIdP4());
                                match1J4.setText(p.getSurname() + " " + p.getName());
                            }
                        }
                        else {
                            match1vs.setText("Aucun match sur ce cours à cette heure.");
                            match1J1.setText("");
                            match1J2.setText("");
                            match1J3.setText("");
                            match1J4.setText("");
                        }
                    }
                    break;
                case 2:
                    for (Match m : matchs) {
                        if (m.getHeure() == 11) {
                            PlayerDao pdao = DaoFactory.getPlayerDao();
                            Player p = pdao.selectPlayer(m.getIdP1());
                            match2J1.setText(p.getSurname() + " " + p.getName());
                            p = pdao.selectPlayer(m.getIdP3());
                            match2J3.setText(p.getSurname() + " " + p.getName());
                            match2vs.setText("VS");
                            if (m.isSimple() == 0) {
                                p = pdao.selectPlayer(m.getIdP2());
                                match2J2.setText(p.getSurname() + " " + p.getName());
                                p = pdao.selectPlayer(m.getIdP4());
                                match2J4.setText(p.getSurname() + " " + p.getName());
                            }
                        }
                        else {
                            match2vs.setText("Aucun match sur ce cours à cette heure.");
                            match2J1.setText("");
                            match2J2.setText("");
                            match2J3.setText("");
                            match2J4.setText("");
                        }
                    }
                    break;
                case 3:
                    for (Match m : matchs) {
                        if (m.getHeure() == 15) {
                            PlayerDao pdao = DaoFactory.getPlayerDao();
                            Player p = pdao.selectPlayer(m.getIdP1());
                            match3J1.setText(p.getSurname() + " " + p.getName());
                            p = pdao.selectPlayer(m.getIdP3());
                            match3J3.setText(p.getSurname() + " " + p.getName());
                            match3vs.setText("VS");
                            if (m.isSimple() == 0) {
                                p = pdao.selectPlayer(m.getIdP2());
                                match3J2.setText(p.getSurname() + " " + p.getName());
                                p = pdao.selectPlayer(m.getIdP4());
                                match3J4.setText(p.getSurname() + " " + p.getName());
                            }
                        }
                        else {
                            match3vs.setText("Aucun match sur ce cours à cette heure.");
                            match3J1.setText("");
                            match3J2.setText("");
                            match3J3.setText("");
                            match3J4.setText("");
                        }
                    }
                    break;
                case 4:
                    for (Match m : matchs) {
                        if (m.getHeure() == 18) {
                            PlayerDao pdao = DaoFactory.getPlayerDao();
                            Player p = pdao.selectPlayer(m.getIdP1());
                            match4J1.setText(p.getSurname() + " " + p.getName());
                            p = pdao.selectPlayer(m.getIdP3());
                            match4J3.setText(p.getSurname() + " " + p.getName());
                            match4vs.setText("VS");
                            if (m.isSimple() == 0) {
                                p = pdao.selectPlayer(m.getIdP2());
                                match4J2.setText(p.getSurname() + " " + p.getName());
                                p = pdao.selectPlayer(m.getIdP4());
                                match4J4.setText(p.getSurname() + " " + p.getName());
                            }
                        }
                        else {
                            match4vs.setText("Aucun match sur ce cours à cette heure.");
                            match4J1.setText("");
                            match4J2.setText("");
                            match4J3.setText("");
                            match4J4.setText("");
                        }
                    }
                    break;
                case 5:
                    for (Match m : matchs) {
                        if (m.getHeure() == 21) {
                            PlayerDao pdao = DaoFactory.getPlayerDao();
                            Player p = pdao.selectPlayer(m.getIdP1());
                            match5J1.setText(p.getSurname() + " " + p.getName());
                            p = pdao.selectPlayer(m.getIdP3());
                            match5J3.setText(p.getSurname() + " " + p.getName());
                            match5vs.setText("VS");
                            if (m.isSimple() == 0) {
                                p = pdao.selectPlayer(m.getIdP2());
                                match5J2.setText(p.getSurname() + " " + p.getName());
                                p = pdao.selectPlayer(m.getIdP4());
                                match5J4.setText(p.getSurname() + " " + p.getName());
                            }
                        }
                        else {
                            match5vs.setText("Aucun match sur ce cours à cette heure.");
                            match5J1.setText("");
                            match5J2.setText("");
                            match5J3.setText("");
                            match5J4.setText("");
                        }
                    }
                    break;
            }
        }
    }
    
    private void remplirTableVIP(JTable tableVIP)
    {
        int i = 0;
        
        while(i < tableVIP.getRowCount())
                {
                tableVIP.setValueAt(0,i,0);
                tableVIP.setValueAt("DANGUIN",i,1);
                tableVIP.setValueAt("Jérôme",i,2);
                tableVIP.setValueAt("30/07/1994",i,3);
                
                //if(tableVIP.getSelectedRow() == tableVIP.getRowCount())
                
                i++;
                }
    }
    
    private void supprimerVIP(JTable tableVIP)
    {
        tableVIP.remove(tableVIP.getSelectedRow());
    }
    
    private void ajouterVIP(JTable tableVIP)
    {
        DefaultTableModel model = new DefaultTableModel(); 
        tableVIP = new JTable(model);
        
        int lastRow = tableVIP.getRowCount();
        lastRow = lastRow++;
        model.addRow(new String[]{Integer.toString(lastRow),txtFieldNom.getText(),txtFieldPrenom.getText(),txtFieldBirthdate.getText()}); 

    }
}
